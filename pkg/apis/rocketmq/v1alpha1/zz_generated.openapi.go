// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.Broker":              schema_pkg_apis_rocketmq_v1alpha1_Broker(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerSpec":          schema_pkg_apis_rocketmq_v1alpha1_BrokerSpec(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerStatus":        schema_pkg_apis_rocketmq_v1alpha1_BrokerStatus(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.Console":             schema_pkg_apis_rocketmq_v1alpha1_Console(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleSpec":         schema_pkg_apis_rocketmq_v1alpha1_ConsoleSpec(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleStatus":       schema_pkg_apis_rocketmq_v1alpha1_ConsoleStatus(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameService":         schema_pkg_apis_rocketmq_v1alpha1_NameService(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceSpec":     schema_pkg_apis_rocketmq_v1alpha1_NameServiceSpec(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceStatus":   schema_pkg_apis_rocketmq_v1alpha1_NameServiceStatus(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransfer":       schema_pkg_apis_rocketmq_v1alpha1_TopicTransfer(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferSpec":   schema_pkg_apis_rocketmq_v1alpha1_TopicTransferSpec(ref),
		"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferStatus": schema_pkg_apis_rocketmq_v1alpha1_TopicTransferStatus(ref),
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_Broker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Broker is the Schema for the brokers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerSpec", "github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.BrokerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_BrokerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerSpec defines the desired state of Broker",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"nameServers": {
						SchemaProps: spec.SchemaProps{
							Description: "NameServers defines the name service list e.g. 192.168.1.1:9876;192.168.1.2:9876",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicaPerGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "ReplicaPerGroup each broker cluster's replica number",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"brokerImage": {
						SchemaProps: spec.SchemaProps{
							Description: "BaseImage is the broker image to use for the Pods",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicy defines how the image is pulled",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"allowRestart": {
						SchemaProps: spec.SchemaProps{
							Description: "AllowRestart defines whether allow pod restart",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources describes the compute resource requirements",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"storageMode": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageMode can be EmptyDir, HostPath, StorageClass",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath is the local path to store data",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "Env defines custom env, e.g. BROKER_MEM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Description: "Volumes define the broker.conf",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"volumeClaimTemplates": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines the StorageClass",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"scalePodName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of pod where the metadata from",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"k8sClusterDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "The domain name of k8s cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "replicaPerGroup", "brokerImage", "imagePullPolicy", "allowRestart", "resources", "storageMode", "hostPath", "env", "volumes", "volumeClaimTemplates", "scalePodName", "k8sClusterDomain"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_BrokerStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BrokerStatus defines the observed state of Broker",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"nodes", "size"},
			},
		},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_Console(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Console is the Schema for the consoles API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleSpec", "github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.ConsoleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_ConsoleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConsoleSpec defines the desired state of Console",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"consoleDeployment": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("k8s.io/api/apps/v1.Deployment"),
						},
					},
					"nameServers": {
						SchemaProps: spec.SchemaProps{
							Description: "NameServers defines the name service list e.g. 192.168.1.1:9876;192.168.1.2:9876",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"consoleDeployment"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/apps/v1.Deployment"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_ConsoleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConsoleStatus defines the observed state of Console",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_NameService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NameService is the Schema for the nameservices API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceSpec", "github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.NameServiceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_NameServiceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NameServiceSpec defines the desired state of NameService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html Size is the number of the name service Pod",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"nameServiceImage": {
						SchemaProps: spec.SchemaProps{
							Description: "NameServiceImage is the name service image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"exporterImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ExporterImage is metric exporter for the broker",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ImagePullPolicy defines how the image is pulled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "HostNetwork can be true or false",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"dnsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "dnsPolicy defines how a pod's DNS will be configured",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources describes the compute resource requirements",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"storageMode": {
						SchemaProps: spec.SchemaProps{
							Description: "StorageMode can be EmptyDir, HostPath, StorageClass",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath is the local path to store data",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeClaimTemplates": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeClaimTemplates defines the StorageClass",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.PersistentVolumeClaim"),
									},
								},
							},
						},
					},
					"k8sClusterDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "The domain name of k8s cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "nameServiceImage", "exporterImage", "imagePullPolicy", "hostNetwork", "dnsPolicy", "resources", "storageMode", "hostPath", "volumeClaimTemplates", "k8sClusterDomain"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.PersistentVolumeClaim", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_NameServiceStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NameServiceStatus defines the observed state of NameService",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nameServers": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html NameServers is the name service ip list",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"nameServers"},
			},
		},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_TopicTransfer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TopicTransfer is the Schema for the topictransfers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferSpec", "github.com/apache/rocketmq-operator/pkg/apis/rocketmq/v1alpha1.TopicTransferStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_TopicTransferSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TopicTransferSpec defines the desired state of TopicTransfer",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"topic": {
						SchemaProps: spec.SchemaProps{
							Description: "Topic name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sourceCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "The cluster where the transferred topic from",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetCluster": {
						SchemaProps: spec.SchemaProps{
							Description: "The cluster where the topic will be transferred to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_rocketmq_v1alpha1_TopicTransferStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TopicTransferStatus defines the observed state of TopicTransfer",
				Type:        []string{"object"},
			},
		},
	}
}
